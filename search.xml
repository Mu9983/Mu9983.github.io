<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一些常用的linux命令行命令</title>
    <url>/2025/01/17/01/</url>
    <content><![CDATA[<p><strong>通过前三天的学习，基本掌握了一些<code>linux</code>命令行命令，以下是一些较为常用的命令</strong></p>
<span id="more"></span>

<p><strong>1. 文件和目录操作</strong></p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>ls</code></td>
<td align="left">列出目录内容</td>
</tr>
<tr>
<td align="left"><code>ls -l</code></td>
<td align="left">以详细列表形式显示目录内容</td>
</tr>
<tr>
<td align="left"><code>ls -a</code></td>
<td align="left">显示所有文件（包括隐藏文件）</td>
</tr>
<tr>
<td align="left"><code>cd &lt;目录&gt;</code></td>
<td align="left">切换目录</td>
</tr>
<tr>
<td align="left"><code>pwd</code></td>
<td align="left">显示当前工作目录</td>
</tr>
<tr>
<td align="left"><code>mkdir &lt;目录名&gt;</code></td>
<td align="left">创建新目录</td>
</tr>
<tr>
<td align="left"><code>rmdir &lt;目录名&gt;</code></td>
<td align="left">删除空目录</td>
</tr>
<tr>
<td align="left"><code>touch &lt;文件名&gt;</code></td>
<td align="left">创建空文件或更新文件时间戳</td>
</tr>
<tr>
<td align="left"><code>cp &lt;源文件&gt; &lt;目标&gt;</code></td>
<td align="left">复制文件或目录</td>
</tr>
<tr>
<td align="left"><code>mv &lt;源文件&gt; &lt;目标&gt;</code></td>
<td align="left">移动或重命名文件或目录</td>
</tr>
<tr>
<td align="left"><code>rm &lt;文件&gt;</code></td>
<td align="left">删除文件</td>
</tr>
<tr>
<td align="left"><code>rm -r &lt;目录&gt;</code></td>
<td align="left">递归删除目录及其内容</td>
</tr>
<tr>
<td align="left"><code>echo &quot;内容&quot; &gt; &lt;文件&gt;</code></td>
<td align="left">写入文件内容</td>
</tr>
<tr>
<td align="left"><code>cat &lt;文件&gt;</code></td>
<td align="left">显示文件内容</td>
</tr>
</tbody></table>
<p><strong>2. 文件压缩和解压</strong></p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>tar -cvf &lt;文件名.tar&gt; &lt;目录&gt;</code></td>
<td align="left">创建 tar 归档文件</td>
</tr>
<tr>
<td align="left"><code>tar -xvf &lt;文件名.tar&gt;</code></td>
<td align="left">解压 tar 归档文件</td>
</tr>
</tbody></table>
<p><strong>3. 快捷键</strong></p>
<table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Ctrl + C</code></td>
<td align="left">终止当前命令</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Z</code></td>
<td align="left">暂停当前命令</td>
</tr>
<tr>
<td align="left"><code>Ctrl + D</code></td>
<td align="left">退出当前终端</td>
</tr>
<tr>
<td align="left"><code>Ctrl + L</code></td>
<td align="left">清屏</td>
</tr>
<tr>
<td align="left"><code>Ctrl + A</code></td>
<td align="left">将光标移动到行首</td>
</tr>
<tr>
<td align="left"><code>Ctrl + E</code></td>
<td align="left">将光标移动到行尾</td>
</tr>
<tr>
<td align="left"><code>Ctrl + R</code></td>
<td align="left">搜索命令历史记录</td>
</tr>
<tr>
<td align="left"><code>Tab</code></td>
<td align="left">自动补全命令或文件名</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于本博客的搭建</title>
    <url>/2025/07/16/03/</url>
    <content><![CDATA[<h1 id="基于HEXO-GitHub来搭建个人Blog"><a href="#基于HEXO-GitHub来搭建个人Blog" class="headerlink" title="基于HEXO+GitHub来搭建个人Blog"></a><strong>基于HEXO+GitHub来搭建个人Blog</strong></h1><span id="more"></span>

<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>搭建的时候很麻烦，很多东西都搞不懂，但是也一点一点的搭建成功了，但是放了半个学期再打开编写东西的时候就忘记了一些东西，所以写下本文章，希望日后再忘的时候能够复习一下</p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><h5 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="# GitHub Pages 是什么？"></a># GitHub Pages 是什么？</h5><ul>
<li><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/what-is-github-pages">What is GitHub Pages? - GitHub Docs</a></li>
</ul>
<p><code>GitHub Pages </code>是由 <code>GitHub </code>官方提供的一种免费的静态站点托管服务，让我们可以在 <code>GitHub </code>仓库里托管和发布自己的静态网站页面。</p>
<h5 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="# Hexo 是什么？"></a># Hexo 是什么？</h5><ul>
<li>官网：<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/">hexo.io</a></li>
</ul>
<p><code>Hexo</code> 是一个快速、简洁且高效的静态博客框架，它基于 <code>Node.js</code>运行，可以将我们撰写的 <code>Markdown </code>文档解析渲染成静态的 <code>HTML</code>网页。</p>
<h5 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="# Hexo + GitHub 文章发布原理"></a># Hexo + GitHub 文章发布原理</h5><p>在本地撰写 <code>Markdown </code>格式文章后，通过<code>Hexo</code>解析文档，渲染生成具有主题样式的 <code>HTML</code> 静态网页，再推送到 <code>GitHub</code> 上完成博文的发布。</p>
<p><img src="https://pic3.zhimg.com/v2-a193a47cf70fe6ecf156e5f3d34920ea_1440w.jpg" alt="img"></p>
<h5 id="优点和不足"><a href="#优点和不足" class="headerlink" title="# 优点和不足"></a># 优点和不足</h5><p><strong>优点</strong>：完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p>
<p><strong>不足</strong>：发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p>
<h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="# 注意事项"></a><strong># 注意事项</strong></h3><ul>
<li>输入代码时，核对准确，最好切换成英文输入法；</li>
<li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li>
<li>统一使用 <a href="https://zhida.zhihu.com/search?content_id=101591397&content_type=Article&match_order=1&q=Git+Bash&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NTI4MzA1MjQsInEiOiJHaXQgQmFzaCIsInpoaWRhX3NvdXJjZSI6ImVudGl0eSIsImNvbnRlbnRfaWQiOjEwMTU5MTM5NywiY29udGVudF90eXBlIjoiQXJ0aWNsZSIsIm1hdGNoX29yZGVyIjoxLCJ6ZF90b2tlbiI6bnVsbH0.Swe3SApKu0v3GjgpK5yUbI4yt2zPTMByhTKNL3MsyTg&zhida_source=entity">Git Bash</a> 进行操作（支持 Win、Mac）；</li>
<li>小白请严格按步骤进行，不要跳！</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="# 环境搭建"></a><strong># 环境搭建</strong></h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://link.zhihu.com/?target=https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p>
<p><img src="https://pic3.zhimg.com/v2-27b47b5ae479ce7987851292a67774b0_1440w.jpg" alt="img"></p>
<h2 id="2-连接-Github"><a href="#2-连接-Github" class="headerlink" title="2. 连接 Github"></a>2. 连接 Github</h2><p>使用邮箱注册 <a href="https://link.zhihu.com/?target=https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>
<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure>

<p><strong>创建 SSH 密匙</strong>：</p>
<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>
<p><strong>添加密匙：</strong></p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><img src="https://pic1.zhimg.com/v2-9125065afd24332d7cd84feb6a350730_1440w.jpg" alt="img"></p>
<p><strong>验证连接：</strong></p>
<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p>
<p><img src="https://pica.zhimg.com/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_1440w.jpg" alt="img"></p>
<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>
<h2 id="3-创建-Github-Pages-仓库"><a href="#3-创建-Github-Pages-仓库" class="headerlink" title="3. 创建 Github Pages 仓库"></a>3. 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<ul>
<li>Repository name 中输入 <code>用户名.github.io</code></li>
<li>勾选 “Initialize this repository with a README”</li>
<li>Description 选填</li>
</ul>
<p>填好后点击 Create repository 创建。</p>
<p><img src="https://picx.zhimg.com/v2-67a8165154f4c5f4a6333e76e78ed815_1440w.jpg" alt="img"></p>
<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h2 id="4-本地安装-Hexo-博客程序"><a href="#4-本地安装-Hexo-博客程序" class="headerlink" title="4. 本地安装 Hexo 博客程序"></a>4. 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p>
<h3 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="# 4.1 安装 Hexo"></a><strong># 4.1 安装 Hexo</strong></h3><p>使用 npm 一键安装 Hexo 博客程序：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>Mac 用户需要管理员权限（sudo），运行这条命令：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p>
<p><img src="https://pic4.zhimg.com/v2-01e7fc8bb9280437deb437bf73a190a1_1440w.jpg" alt="img"></p>
<h3 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="# 4.2 Hexo 初始化和本地预览"></a><strong># 4.2 Hexo 初始化和本地预览</strong></h3><p><strong>初始化并安装所需组件：</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure>

<p>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure>

<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>
<p><img src="https://pic2.zhimg.com/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_1440w.jpg" alt="img"></p>
<p>**Tips：**如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p>
<p>Hexo 博客文件夹目录结构如下：</p>
<p><img src="https://pic1.zhimg.com/v2-264c75c0e493ae8cc5f283567c64ff2c_1440w.jpg" alt="img"></p>
<h2 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5. 部署 Hexo 到 GitHub Pages"></a>5. 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先<strong>安装 hexo-deployer-git</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>
<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>
<h2 id="6-绑定域名（可选）"><a href="#6-绑定域名（可选）" class="headerlink" title="6. 绑定域名（可选）"></a>6. 绑定域名（可选）</h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href="https://link.zhihu.com/?target=http://github.io">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p>
<p>我们使用 <a href="https://link.zhihu.com/?target=https://www.namesilo.com/?rid=d27fa32do">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p>
<h3 id="6-1-域名注册和解析"><a href="#6-1-域名注册和解析" class="headerlink" title="# 6.1 域名注册和解析"></a><strong># 6.1 域名注册和解析</strong></h3><ul>
<li>域名注册和解析教程：<a href="https://zhuanlan.zhihu.com/p/33921436">Namesilo 域名购买及使用教程</a></li>
</ul>
<p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p>
<p><img src="https://pic3.zhimg.com/v2-d5d37c8ad523d8ab5c7c200fabc9585e_1440w.jpg" alt="img"></p>
<h3 id="6-2-绑定域名到-Hexo-博客"><a href="#6-2-绑定域名到-Hexo-博客" class="headerlink" title="# 6.2 绑定域名到 Hexo 博客"></a><strong># 6.2 绑定域名到 Hexo 博客</strong></h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href="http://www.example.com,保存名称为/">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p>
<p>清除缓存等文件并重新发布网站：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean   # 清除缓存文件等</span><br><span class="line">hexo g       # 生成页面</span><br><span class="line">hexo s       # 启动预览</span><br></pre></td></tr></table></figure>

<p>现在就可以使用自己的域名访问 Hexo 博客了。</p>
<h3 id="6-3-开启-HTTPS"><a href="#6-3-开启-HTTPS" class="headerlink" title="# 6.3 开启 HTTPS"></a><strong># 6.3 开启 HTTPS</strong></h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p>
<p><img src="https://pic2.zhimg.com/v2-54f8744afc9746884e6b3acecfc5f8cf_1440w.jpg" alt="img"></p>
<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p>
<h2 id="7-开始使用"><a href="#7-开始使用" class="headerlink" title="7. 开始使用"></a>7. 开始使用</h2><h3 id="7-1-发布文章"><a href="#7-1-发布文章" class="headerlink" title="# 7.1 发布文章"></a><strong># 7.1 发布文章</strong></h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>

<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>
<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure>

<hr>
<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure>

<h3 id="7-2-网站设置"><a href="#7-2-网站设置" class="headerlink" title="# 7.2 网站设置"></a><strong># 7.2 网站设置</strong></h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p>
<p>注意：冒号后要加一个空格！</p>
<h3 id="7-3-更换主题"><a href="#7-3-更换主题" class="headerlink" title="# 7.3 更换主题"></a><strong># 7.3 更换主题</strong></h3><p>在 <a href="https://link.zhihu.com/?target=https://hexo.io/themes/">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/getting-started.html">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p>
<h3 id="7-4-常用命令"><a href="#7-4-常用命令" class="headerlink" title="# 7.4 常用命令"></a><strong># 7.4 常用命令</strong></h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>

<h2 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8 常见问题"></a>8 常见问题</h2><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong></p>
<p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p>
<p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p>
<p><img src="https://pic4.zhimg.com/v2-45701cf120ca77e6733ad30b40666f33_1440w.jpg" alt="img"></p>
<p><strong>2、设置网站图标</strong></p>
<p>进入 themes&#x2F;主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p>
<p><strong>3、修改并部署后没有效果</strong></p>
<p>使用 <code>hexo clean</code> 清理后重新部署。</p>
<p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p>
<p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p>
<p><strong>5、Mac 安装 Hexo 报错无法安装</strong></p>
<p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p>
<p><strong>6、npm 下载速度慢，甚至完全没反应</strong></p>
<p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p>
<p>临时更换方法：在 npm 安装命令后面加上：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Hexo 是一种纯静态的博客，我们必须要在本地完成文章的编辑再部署到 GitHub 上，依赖于本地环境。不能像 WordPress 或 Typecho 那样的动态博客一样能直接在浏览器中完成撰文和发布。</p>
<p>可以说是一种比较极客的写博客方式，但是优势也是明显的——免费稳定省心，比较适合爱折腾研究的用户，或者没有在线发文需求的朋友。</p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>git中的常用操作</title>
    <url>/2025/01/17/02/</url>
    <content><![CDATA[<p><strong>一些常用的git操作</strong></p>
<span id="more"></span>

<h3 id="1-Git-基本概念"><a href="#1-Git-基本概念" class="headerlink" title="1. Git 基本概念"></a>1. <strong>Git 基本概念</strong></h3><ul>
<li><strong>本地仓库</strong>: 一个 Git 仓库包含项目的所有文件和历史记录。</li>
<li><strong>工作区</strong>: 你在本地编辑的文件所在的目录。</li>
<li><strong>暂存区</strong>: 准备提交的文件会被放在暂存区。</li>
<li><strong>提交commit</strong>: 将暂存区的文件快照保存到仓库历史中。</li>
<li><strong>分支branch</strong>: 用于开发新功能或修复 bug 的独立线路。</li>
<li><strong>合并merge</strong>: 将一个分支的更改合并到另一个分支。</li>
<li><strong>克隆clone</strong>: 从远程仓库复制一个完整的仓库到本地。</li>
<li><strong>拉取pull</strong>: 从远程仓库获取最新更改并合并到本地分支。</li>
<li><strong>推送push</strong>: 将本地分支的更改上传到远程仓库。</li>
</ul>
<h3 id="2-常用-Git-命令"><a href="#2-常用-Git-命令" class="headerlink" title="2. 常用 Git 命令"></a>2. <strong>常用 Git 命令</strong></h3><ul>
<li><p><code>git init</code>: 在当前目录初始化一个新的 Git 仓库。</p>
</li>
<li><p><code>git clone &lt;url&gt;</code>: 克隆一个远程仓库到本地。</p>
</li>
<li><p><code>git status</code>: 查看工作区和暂存区的状态。</p>
</li>
<li><p><code>git log</code>: 查看提交历史。</p>
</li>
<li><p><code>git log --pretty=oneline</code>: 查看简洁的提交历史。</p>
</li>
<li><p><code>git log --graph --pretty=oneline --abbrev</code>: 查看带有分支图的简洁提交历史。</p>
</li>
<li><p><code>git add &lt;file&gt;</code>: 将文件添加到暂存区。</p>
</li>
<li><p><code>git add .</code>: 将所有更改的文件添加到暂存区。</p>
</li>
<li><p><code>git commit -m &quot;commit message&quot;</code>: 提交暂存区的更改并添加提交信息。</p>
</li>
<li><p><code>git commit -am &quot;commit message&quot;</code>: 添加所有更改的文件并提交（跳过 <code>git add</code>）。</p>
</li>
<li><p><code>git branch</code>: 查看所有本地分支。</p>
</li>
<li><p><code>git branch &lt;branch_name&gt;</code>: 创建一个新分支。</p>
</li>
<li><p><code>git checkout &lt;branch_name&gt;</code> 或者 <code>git switch &lt;branch_name&gt;</code>: 切换到指定分支。</p>
</li>
<li><p><code>git checkout -b &lt;branch_name&gt;</code> 或者 <code>git switch -c &lt;branch_name&gt;</code>: 创建并切换到新分支。</p>
</li>
<li><p><code>git merge &lt;branch_name&gt;</code>: 将指定分支合并到当前分支。</p>
</li>
<li><p><code>git merge -m &quot;commit message&quot; &lt;branch_name&gt;</code>:将指定分支合并到当前分支并添加提交信息。</p>
</li>
<li><p><code>git branch -d &lt;branch_name&gt;</code>: 删除指定分支。</p>
</li>
<li><p><code>git remote</code>:查看远程库。</p>
</li>
<li><p><code>git remote -v</code>: 查看远程仓库详细信息。</p>
</li>
<li><p><code>git remote add origin &lt;url&gt;</code>: 添加远程仓库。</p>
</li>
<li><p><code>git push origin &lt;branch_name&gt;</code>: 将本地分支推送到远程仓库。</p>
</li>
<li><p><code>git pull origin &lt;branch_name&gt;</code>: 从远程仓库拉取最新更改并合并到本地分支。</p>
</li>
<li><p><code>git fetch</code>: 从远程仓库获取最新更改，但不合并。</p>
</li>
<li><p><code>git reset &lt;file&gt;</code>: 将文件从暂存区撤回到工作区。</p>
</li>
<li><p><code>git branch --set-upstream-to &lt;branch_name&gt; origin/&lt;branch_name&gt;</code>:创建本地和远程分支链接关系</p>
</li>
<li><p><code>git reset --hard HEAD</code>: 撤销所有未提交的更改，恢复到上一次提交的状态。</p>
</li>
<li><p><code>git reset --hard &lt;commit_hash&gt;</code>: 回退到指定提交，丢弃之后的更改。</p>
</li>
<li><p><code>git revert &lt;commit_hash&gt;</code>: 创建一个新的提交，撤销指定提交的更改。</p>
</li>
<li><p><code>git tag</code>: 查看所有标签。</p>
</li>
<li><p><code>git tag &lt;tag_name&gt;</code>: 创建一个新标签。</p>
</li>
<li><p><code>git tag -a &lt;tag_name&gt; -m &quot;tag message&quot;</code>: 创建带注释的标签。</p>
</li>
<li><p><code>git push origin &lt;tag_name&gt;</code>: 将标签推送到远程仓库。</p>
</li>
<li><p><code>git push origin --tags</code>: 推送所有标签到远程仓库。</p>
</li>
</ul>
<h3 id="3-Git-工作流程"><a href="#3-Git-工作流程" class="headerlink" title="3. Git 工作流程"></a>3. <strong>Git 工作流程</strong></h3><ol>
<li><p><strong>初始化仓库</strong>: <code>git init</code> 。</p>
</li>
<li><p><strong>创建分支</strong>: <code>git checkout -b &lt;branch_name&gt;</code> 或者 <code>git switch -c &lt;branch_name&gt;</code>。</p>
</li>
<li><p><strong>开发与提交</strong>: 编辑文件后使用 <code>git add</code> 和 <code>git commit</code>添加并提交。</p>
</li>
<li><p><strong>合并分支</strong>: 切换到主分支后使用 <code>git merge &lt;branch_name&gt;</code>。</p>
</li>
<li><p><strong>推送更改</strong>: <code>git push origin &lt;branch_name&gt;</code>。</p>
<p><strong>若更改不是最新</strong>:先拉取最新:<code>git pull</code>，合并<code>git merge</code>，再推送<code>git push</code>。</p>
</li>
<li><p><strong>拉取更新</strong>: <code>git pull origin &lt;branch_name&gt;</code>。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
